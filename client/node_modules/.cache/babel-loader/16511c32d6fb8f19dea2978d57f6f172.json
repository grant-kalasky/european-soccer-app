{"ast":null,"code":"function searchTeams(query) {\n  return fetch(\"/teams?q=\".concat(query), {\n    accept: \"application/json\"\n  }).then(res => res.json()); // .then(checkStatus)\n  // .then(parseJSON)\n  // .then(cb);\n}\n\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n\n  const error = new Error(\"HTTP Error \".concat(response.statusText));\n  error.status = response.statusText;\n  error.response = response;\n  console.log(error); // eslint-disable-line no-console\n\n  throw error;\n}\n\nfunction parseJSON(response) {\n  return response.json();\n}\n\nconst Client = {\n  searchTeams\n};\nexport default Client;","map":{"version":3,"sources":["/Users/grantkalasky/Berkeley/INFO257/european-soccer-app/client/src/Client.js"],"names":["searchTeams","query","fetch","accept","then","res","json","checkStatus","response","status","error","Error","statusText","console","log","parseJSON","Client"],"mappings":"AAAA,SAASA,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,SAAOC,KAAK,oBAAaD,KAAb,GAAsB;AAChCE,IAAAA,MAAM,EAAE;AADwB,GAAtB,CAAL,CAGNC,IAHM,CAGDC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAHN,CAAP,CAD0B,CAKxB;AACA;AACA;AACH;;AAED,SAASC,WAAT,CAAqBC,QAArB,EAA+B;AAC7B,MAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAnB,IAA0BD,QAAQ,CAACC,MAAT,GAAkB,GAAhD,EAAqD;AACnD,WAAOD,QAAP;AACD;;AACD,QAAME,KAAK,GAAG,IAAIC,KAAJ,sBAAwBH,QAAQ,CAACI,UAAjC,EAAd;AACAF,EAAAA,KAAK,CAACD,MAAN,GAAeD,QAAQ,CAACI,UAAxB;AACAF,EAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ,EAP6B,CAOT;;AACpB,QAAMA,KAAN;AACD;;AAED,SAASK,SAAT,CAAmBP,QAAnB,EAA6B;AAC3B,SAAOA,QAAQ,CAACF,IAAT,EAAP;AACD;;AAED,MAAMU,MAAM,GAAG;AAAEhB,EAAAA;AAAF,CAAf;AACA,eAAegB,MAAf","sourcesContent":["function searchTeams(query) {\n  return fetch(`/teams?q=${query}`, {\n    accept: \"application/json\"\n  })\n  .then(res => res.json())\n    // .then(checkStatus)\n    // .then(parseJSON)\n    // .then(cb);\n}\n\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n  const error = new Error(`HTTP Error ${response.statusText}`);\n  error.status = response.statusText;\n  error.response = response;\n  console.log(error); // eslint-disable-line no-console\n  throw error;\n}\n\nfunction parseJSON(response) {\n  return response.json();\n}\n\nconst Client = { searchTeams };\nexport default Client;"]},"metadata":{},"sourceType":"module"}